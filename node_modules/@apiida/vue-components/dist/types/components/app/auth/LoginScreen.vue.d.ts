/**
 * Users can log in here. The component can also cover the "forgotten password" function.
 */
declare const _default: import("vue").DefineComponent<{
    /**
     * The title, which is displayed under the logo, e.g. Admin Portal
     */
    titleBelowLogo: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Switch between Login and Forgot Password.
     */
    forgotPasswordView: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Allow switching between Login and Forgot Password.
     */
    allowSwitching: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Waitong for response after login/request password.
     */
    isLoadingBouncer: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * SAML Link
     */
    samlLink: {
        type: StringConstructor;
        default: string;
    };
    /**
     * LDAP Enabled
     */
    ldapEnabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If yes the anonymous login is available
     */
    anonymousLoginEnabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    getTypeUserNameInput: () => string | undefined;
    username: import("vue").Ref<string>;
    password: import("vue").Ref<string>;
    isLoading: import("vue").Ref<boolean>;
    forgotPasswordMode: import("vue").Ref<boolean>;
    redirectToSaml: () => void;
    toggleForgotPasswordMode: () => void;
    submitForm: () => void;
    loginWithoutCredentials: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("login" | "forgot-password" | "login-without-credentials")[], "login" | "forgot-password" | "login-without-credentials", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * The title, which is displayed under the logo, e.g. Admin Portal
     */
    titleBelowLogo: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Switch between Login and Forgot Password.
     */
    forgotPasswordView: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Allow switching between Login and Forgot Password.
     */
    allowSwitching: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Waitong for response after login/request password.
     */
    isLoadingBouncer: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * SAML Link
     */
    samlLink: {
        type: StringConstructor;
        default: string;
    };
    /**
     * LDAP Enabled
     */
    ldapEnabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If yes the anonymous login is available
     */
    anonymousLoginEnabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onLogin?: ((...args: any[]) => any) | undefined;
    "onForgot-password"?: ((...args: any[]) => any) | undefined;
    "onLogin-without-credentials"?: ((...args: any[]) => any) | undefined;
}, {
    titleBelowLogo: string;
    forgotPasswordView: boolean;
    allowSwitching: boolean;
    isLoadingBouncer: boolean;
    samlLink: string;
    ldapEnabled: boolean;
    anonymousLoginEnabled: boolean;
}, {}>;
export default _default;
