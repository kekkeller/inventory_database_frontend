import { ComputedRef, PropType } from 'vue';
import TableOptionItem from './TableOptionItem';
import { DeploymentStatus, inProgress } from './DeploymentStatus';
import TableHeaderItem from './TableHeaderItem';
import { SortingDirection } from './SortingDirection';
import Pageable from './Pageable';
/**
 * A normal table, here you can also select rows and perform actions for all selected rows.
 * For page navigation and sorting, the prop Pageable is kept up to date and "update" is thrown when a change is made.
 * If a row has the deployment status DELETION_IN_PROGRESS or DEPLOYMENT_IN_PROGRESS it is disabled and gets a load indicator. In addition, "update" is thrown every 3 seconds to check if the row still has this status.
 */
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * The title is displayed in capital letters next to the search
     */
    title: {
        type: StringConstructor;
        default: string;
    };
    waitForLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * if undefinded sorting is not active
     */
    pageable: {
        type: PropType<Pageable>;
        default: undefined;
    };
    headers: {
        type: PropType<TableHeaderItem[]>;
        required: true;
    };
    data: {
        type: PropType<any[]>;
        required: true;
    };
    /**
     * The search is displayed if pagination is not undefined or you disable it here.
     */
    showSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * A button to reload the table is displayed.
     */
    showReloadButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If true, whole lines are reformatted depending on the deployment state.
     */
    handleDeploymentStatus: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If the entity has no field id, another identifier must be specified here.
     */
    entityIdentifierKey: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Changes the base of the props headers.widthInPercent. The default mode is in %, but can also be changed to px.
     */
    headerWidthMode: {
        type: PropType<"%" | "px">;
        default: string;
    };
    /**
     * Turns off at true the row click. The line style is changed and the event is not thrown.
     */
    disableRowClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * What can be done with the selected entities. e.g. Delete. Title of the button callback when clicking it. As paramater comes an array with the values from entityIdentifierKey for the selected entities
     */
    options: {
        type: PropType<TableOptionItem[]>;
        default: () => never[];
    };
    /**
     * The options are then of course also not displayed
     */
    showCheckboxes: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If there is no data for the table, an empty cell with this text is displayed, which goes over the entire table.
     * This is also displayed in case of a failed search.
     */
    emptyDataMessage: {
        type: StringConstructor;
        default: string;
    };
    /**
     * If there is no data for the table, an empty cell with this text is displayed, which goes over the entire table.
     * This is also displayed in case of a failed search.
     */
    tableStyle: {
        type: PropType<"base" | "naked">;
        default: string;
    };
}, {
    getHeaders: () => Array<TableHeaderItem>;
    emptyTableSize: import("vue").Ref<number>;
    DeploymentStatus: typeof DeploymentStatus;
    SortingDirection: typeof SortingDirection;
    searchText: import("vue").Ref<string>;
    headerCheck: import("vue").Ref<boolean>;
    headerIndeterminate: import("vue").Ref<boolean>;
    dataRefs: import("vue").Ref<any>;
    selectedIds: ComputedRef<any[]>;
    inProgress: typeof inProgress;
    disableIfInProgress: import("vue").Ref<boolean>;
    toggleFilterActive: (item: {
        id: string | number;
        text: string;
        active?: boolean;
    }, headerToFilter: TableHeaderItem) => void;
    isFilterActiv: (header: TableHeaderItem) => boolean;
    clickHeaderCheck: () => void;
    sort: (header: TableHeaderItem) => void;
    toPage: (page: number) => void;
    setDataRefs: (value?: boolean) => void;
    emitView: (row: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("view" | "update" | "update:pageable" | "update:waitForLoading" | "update:headers" | "manual-reload")[], "view" | "update" | "update:pageable" | "update:waitForLoading" | "update:headers" | "manual-reload", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * The title is displayed in capital letters next to the search
     */
    title: {
        type: StringConstructor;
        default: string;
    };
    waitForLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * if undefinded sorting is not active
     */
    pageable: {
        type: PropType<Pageable>;
        default: undefined;
    };
    headers: {
        type: PropType<TableHeaderItem[]>;
        required: true;
    };
    data: {
        type: PropType<any[]>;
        required: true;
    };
    /**
     * The search is displayed if pagination is not undefined or you disable it here.
     */
    showSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * A button to reload the table is displayed.
     */
    showReloadButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If true, whole lines are reformatted depending on the deployment state.
     */
    handleDeploymentStatus: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If the entity has no field id, another identifier must be specified here.
     */
    entityIdentifierKey: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Changes the base of the props headers.widthInPercent. The default mode is in %, but can also be changed to px.
     */
    headerWidthMode: {
        type: PropType<"%" | "px">;
        default: string;
    };
    /**
     * Turns off at true the row click. The line style is changed and the event is not thrown.
     */
    disableRowClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * What can be done with the selected entities. e.g. Delete. Title of the button callback when clicking it. As paramater comes an array with the values from entityIdentifierKey for the selected entities
     */
    options: {
        type: PropType<TableOptionItem[]>;
        default: () => never[];
    };
    /**
     * The options are then of course also not displayed
     */
    showCheckboxes: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * If there is no data for the table, an empty cell with this text is displayed, which goes over the entire table.
     * This is also displayed in case of a failed search.
     */
    emptyDataMessage: {
        type: StringConstructor;
        default: string;
    };
    /**
     * If there is no data for the table, an empty cell with this text is displayed, which goes over the entire table.
     * This is also displayed in case of a failed search.
     */
    tableStyle: {
        type: PropType<"base" | "naked">;
        default: string;
    };
}>> & {
    onView?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageable"?: ((...args: any[]) => any) | undefined;
    "onUpdate:waitForLoading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headers"?: ((...args: any[]) => any) | undefined;
    "onManual-reload"?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    showSearch: boolean;
    options: TableOptionItem[];
    pageable: Pageable;
    waitForLoading: boolean;
    showReloadButton: boolean;
    handleDeploymentStatus: boolean;
    entityIdentifierKey: string;
    headerWidthMode: "%" | "px";
    disableRowClick: boolean;
    showCheckboxes: boolean;
    emptyDataMessage: string;
    tableStyle: "base" | "naked";
}, {}>;
export default _default;
