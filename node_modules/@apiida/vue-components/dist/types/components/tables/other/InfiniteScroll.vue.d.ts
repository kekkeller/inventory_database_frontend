import { PropType } from 'vue';
import Pageable from '../Pageable';
/**
 * Can be used to perform similar functions to a table if the entries are passed as tiles in the slot.
 */
declare const _default: import("vue").DefineComponent<{
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The Pageable object as in Basetable
     */
    pageable: {
        type: PropType<Pageable>;
        required: true;
    };
    /**
     * The number of elements currently displayed
     */
    entitySize: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The DIVelement on that will be scrolled.
     */
    scrollDivDataTestId: {
        type: StringConstructor;
        default: string;
    };
}, {
    screenHeight: import("vue").Ref<number>;
    scrollDiv: import("vue").Ref<HTMLDivElement | undefined>;
    scrollDown: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:pageable" | "load-data")[], "update:pageable" | "load-data", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The Pageable object as in Basetable
     */
    pageable: {
        type: PropType<Pageable>;
        required: true;
    };
    /**
     * The number of elements currently displayed
     */
    entitySize: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * The DIVelement on that will be scrolled.
     */
    scrollDivDataTestId: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:pageable"?: ((...args: any[]) => any) | undefined;
    "onLoad-data"?: ((...args: any[]) => any) | undefined;
}, {
    loading: boolean;
    entitySize: number;
    scrollDivDataTestId: string;
}, {}>;
export default _default;
