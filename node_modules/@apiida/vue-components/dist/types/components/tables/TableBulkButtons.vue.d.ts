import { PropType } from 'vue';
import TableOptionItem from './TableOptionItem';
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * What can be done with the selected entities. e.g. Delete. Title of the button callback when clicking it.
     * As paramater comes an array with the values from entityIdentifierKey for the selected entities
     */
    options: {
        type: PropType<TableOptionItem[]>;
        required: true;
    };
    selectedIds: {
        type: PropType<any>;
        required: true;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    textDialog: import("vue").Ref<string>;
    titleDialog: import("vue").Ref<string>;
    doButtonTextConfirmDialog: import("vue").Ref<string>;
    showDialog: import("vue").Ref<boolean>;
    dialogHandler: (option: TableOptionItem) => void;
    execCallback: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "callback-executed"[], "callback-executed", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * What can be done with the selected entities. e.g. Delete. Title of the button callback when clicking it.
     * As paramater comes an array with the values from entityIdentifierKey for the selected entities
     */
    options: {
        type: PropType<TableOptionItem[]>;
        required: true;
    };
    selectedIds: {
        type: PropType<any>;
        required: true;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onCallback-executed"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
}, {}>;
export default _default;
