import { PropType } from 'vue';
import ListInputItem from './ListInputItem';
import { getId } from '../../helper/IdHelper';
declare const _default: import("vue").DefineComponent<{
    items: {
        type: PropType<ListInputItem[]>;
        default: () => never[];
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => string;
    };
    queryValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => string;
    };
    label: {
        type: StringConstructor;
        default: () => string;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Deletes the input when clicked
     */
    cleanSelectedOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    widthInPx: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Deletes the input when pressing Enter
     */
    cleanOnEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * preselect by id
     */
    preselect: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => string;
    };
    /**
     * Displays a check mark by the selected element.
     */
    enableTicks: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
}, {
    query: import("vue").Ref<string>;
    selectedItem: import("vue").Ref<{
        id: string | number;
        text: string;
    }>;
    filteredItems: import("vue").ComputedRef<ListInputItem[]>;
    updateQuery: (event: Event | undefined) => void;
    enterCombobox: (value: string) => void;
    clickComboboxInput: () => void;
    lostFocusOnInput: (value: string) => void;
    getId: typeof getId;
    comboDiv: import("vue").Ref<HTMLDivElement | undefined>;
    minWidth: import("vue").ComputedRef<number>;
    getStyle: (minW: number) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "enter" | "update:queryValue" | "leave-input-empty")[], "update:modelValue" | "enter" | "update:queryValue" | "leave-input-empty", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: PropType<ListInputItem[]>;
        default: () => never[];
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => string;
    };
    queryValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => string;
    };
    label: {
        type: StringConstructor;
        default: () => string;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    id: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Deletes the input when clicked
     */
    cleanSelectedOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    widthInPx: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Deletes the input when pressing Enter
     */
    cleanOnEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * preselect by id
     */
    preselect: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => string;
    };
    /**
     * Displays a check mark by the selected element.
     */
    enableTicks: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onEnter?: ((...args: any[]) => any) | undefined;
    "onUpdate:queryValue"?: ((...args: any[]) => any) | undefined;
    "onLeave-input-empty"?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    label: string;
    placeholder: string;
    disabled: boolean;
    modelValue: string | number;
    infoLabelContent: {
        title?: string | undefined;
        text: string;
        link?: string | undefined;
    } | undefined;
    items: ListInputItem[];
    queryValue: string | number;
    cleanSelectedOnClick: boolean;
    widthInPx: number;
    cleanOnEnter: boolean;
    preselect: string | number;
    enableTicks: boolean;
}, {}>;
export default _default;
