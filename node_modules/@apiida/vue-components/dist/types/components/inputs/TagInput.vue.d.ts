import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<string[]>;
        default: () => never[];
    };
    allTags: {
        type: PropType<string[]>;
        default: () => never[];
    };
    label: {
        type: StringConstructor;
        default: () => string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
}, {
    tags: import("vue").Ref<string[]>;
    items: import("vue").Ref<{
        id: string | number;
        text: string;
    }[]>;
    comboQueryValue: import("vue").Ref<string>;
    addTag: (value: string) => void;
    addQueryValueAsTag: () => void;
    removeTag: (index: number) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<string[]>;
        default: () => never[];
    };
    allTags: {
        type: PropType<string[]>;
        default: () => never[];
    };
    label: {
        type: StringConstructor;
        default: () => string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    placeholder: string;
    disabled: boolean;
    modelValue: string[];
    infoLabelContent: {
        title?: string | undefined;
        text: string;
        link?: string | undefined;
    } | undefined;
    allTags: string[];
}, {}>;
export default _default;
