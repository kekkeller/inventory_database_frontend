import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    classLabel: {
        type: StringConstructor;
        default: string;
    };
    classPlaceholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
    infoLabelWidth: {
        type: NumberConstructor;
        default: number;
    };
}, {
    value: import("vue").WritableComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "clicked" | "changed")[], "update:modelValue" | "clicked" | "changed", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    indeterminate: {
        type: BooleanConstructor;
        default: boolean;
    };
    classLabel: {
        type: StringConstructor;
        default: string;
    };
    classPlaceholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
    infoLabelWidth: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClicked?: ((...args: any[]) => any) | undefined;
    onChanged?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    placeholder: string;
    disabled: boolean;
    modelValue: boolean;
    infoLabelContent: {
        title?: string | undefined;
        text: string;
        link?: string | undefined;
    } | undefined;
    classLabel: string;
    indeterminate: boolean;
    classPlaceholder: string;
    infoLabelWidth: number;
}, {}>;
export default _default;
