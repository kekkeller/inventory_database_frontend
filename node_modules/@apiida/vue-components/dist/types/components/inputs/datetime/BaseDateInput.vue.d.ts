import { PropType } from 'vue';
import '@vuepic/vue-datepicker/dist/main.css';
import { getId } from '../../../helper/IdHelper';
/**
 * https://vue3datepicker.com/
 */
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    modelValue: {
        type: (StringConstructor | DateConstructor | {
            (arrayLength: number): (string | Date)[];
            (...items: (string | Date)[]): (string | Date)[];
            new (arrayLength: number): (string | Date)[];
            new (...items: (string | Date)[]): (string | Date)[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        })[];
        default: undefined;
    };
    mode: {
        type: PropType<"time" | "date" | "datetime">;
        required: true;
    };
    format: {
        type: StringConstructor;
        required: true;
    };
    maxRange: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiCalendars: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * smallest possible date. https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min
     */
    min: {
        type: (StringConstructor | DateConstructor)[];
        default: string;
    };
    /**
     * largest possible date
     */
    max: {
        type: (StringConstructor | DateConstructor)[];
        default: string;
    };
    autoApply: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAutoApply: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
}, {
    dateSelected: (event: Event) => void;
    parsedFormat: import("vue").ComputedRef<string>;
    is24: import("vue").ComputedRef<boolean>;
    value: import("vue").WritableComputedRef<any>;
    getId: typeof getId;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    modelValue: {
        type: (StringConstructor | DateConstructor | {
            (arrayLength: number): (string | Date)[];
            (...items: (string | Date)[]): (string | Date)[];
            new (arrayLength: number): (string | Date)[];
            new (...items: (string | Date)[]): (string | Date)[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        })[];
        default: undefined;
    };
    mode: {
        type: PropType<"time" | "date" | "datetime">;
        required: true;
    };
    format: {
        type: StringConstructor;
        required: true;
    };
    maxRange: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiCalendars: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * smallest possible date. https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min
     */
    min: {
        type: (StringConstructor | DateConstructor)[];
        default: string;
    };
    /**
     * largest possible date
     */
    max: {
        type: (StringConstructor | DateConstructor)[];
        default: string;
    };
    autoApply: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAutoApply: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * A small question mark icon will appear, which will display the text when you click on it.
     */
    infoLabelContent: {
        type: PropType<{
            title?: string | undefined;
            text: string;
            link?: string | undefined;
        } | undefined>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    label: string;
    disabled: boolean;
    modelValue: string | Date | (string | Date)[];
    range: boolean;
    dark: boolean;
    infoLabelContent: {
        title?: string | undefined;
        text: string;
        link?: string | undefined;
    } | undefined;
    min: string | Date;
    max: string | Date;
    multiCalendars: number | boolean;
    clearable: boolean;
    autoApply: boolean;
    closeOnAutoApply: boolean;
    maxRange: string | number;
}, {}>;
export default _default;
